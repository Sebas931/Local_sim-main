version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: localsim-postgres
    environment:
      POSTGRES_DB: localsim_db
      POSTGRES_USER: ${POSTGRES_USER:-localsim}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-localsim}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - localsim-network
    restart: unless-stopped

  # MongoDB Database
  mongo:
    image: mongo:7
    container_name: localsim-mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-localsim}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-changeme123}
      MONGO_INITDB_DATABASE: localsim_db
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - localsim-network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: localsim-backend
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-localsim}:${POSTGRES_PASSWORD:-changeme123}@postgres:5432/localsim_db
      MONGO_URL: mongodb://${MONGO_USER:-localsim}:${MONGO_PASSWORD:-changeme123}@mongo:27017/localsim_db?authSource=admin

      # JWT
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-super-secret-jwt-key-change-in-production}
      JWT_ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 1440

      # Siigo API
      SIIGO_USER: ${SIIGO_USER}
      SIIGO_PARTNER_ID: ${SIIGO_PARTNER_ID}
      SIIGO_API_URL: ${SIIGO_API_URL:-https://api.siigo.com}
      SIIGO_KEY: ${SIIGO_KEY}

      # Default Customer
      DEFAULT_CUSTOMER_ID: ${DEFAULT_CUSTOMER_ID}
      DEFAULT_CUSTOMER_IDENTIFICATION: ${DEFAULT_CUSTOMER_IDENTIFICATION}

      # WinRed
      WINRED_BASE_URL: ${WINRED_BASE_URL:-https://winred.co/api}
      WINRED_API_VERSION: ${WINRED_API_VERSION:-1.0}
      WINRED_USER_ID: ${WINRED_USER_ID}
      WINRED_API_KEY: ${WINRED_API_KEY}
      WINRED_SECRET_KEY: ${WINRED_SECRET_KEY}
      WINRED_BASIC_USER: ${WINRED_BASIC_USER}
      WINRED_BASIC_PASS: ${WINRED_BASIC_PASS}
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/__pycache__
    networks:
      - localsim-network
    restart: unless-stopped

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: localsim-frontend
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8001}
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - localsim-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  mongo_data:
    driver: local

networks:
  localsim-network:
    driver: bridge
